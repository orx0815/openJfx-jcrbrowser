<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>openjfx-jcr-browser.desktop</artifactId>
  <packaging>jar</packaging>

  <name>OpenJfxJcrBrowser-Desktop</name>
  
  <parent>
    <groupId>org.motorbrot</groupId>
    <artifactId>openjfx-jcr-browser.parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <relativePath>../../pom.xml</relativePath>
  </parent>
    
  <build>
    <plugins>

      <!-- Run the app with 'mvn exec:java' -->          
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>
        <executions>
          <execution>
            <goals>
              <goal>java</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <mainClass>${mainClassName}</mainClass>
        </configuration>
      </plugin>
      
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${springboot.version}</version>
        <configuration>
          <mainClass>${mainClassName}</mainClass>
        </configuration>
      </plugin>
       
      <!-- Test the app with 'mvn test' --> 
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <!-- 
             Comment out the following systemPropertyVariables, if you want to see unitTest on the desktop in action.
             Stealing the mouse or locking the screen during execution will fail the test. 
          -->
          <systemPropertyVariables>
            <java.awt.headless>true</java.awt.headless>
            <testfx.robot>glass</testfx.robot>
            <testfx.headless>true</testfx.headless>
            <prism.order>sw</prism.order>
            <prism.text>t2k</prism.text>
          </systemPropertyVariables>
        
        </configuration>
      </plugin>
      
      <!-- openjfx plugin: 'mvn javafx:run'
           
           Creating an application image with custom modular jvm via
            'mvn javafx:jlink' 
           will NOT work yet, as the project itself isn't modular due to non-modularized 3rd party dependencies
      -->
      <plugin>
            <groupId>org.openjfx</groupId>
          <artifactId>javafx-maven-plugin</artifactId>
          <version>0.0.8</version>
          <configuration>
              <mainClass>${mainClassName}</mainClass>
          </configuration>
      </plugin>
      
      <!-- generate META-INF spring.components -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <annotationProcessorPaths>
            <path>
              <groupId>org.springframework</groupId>
              <artifactId>spring-context-indexer</artifactId>
              <version>5.3.16</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>
      
    </plugins>
  </build>
      
  
  <!-- ====================================================================== -->
  <!-- D E P E N D E N C I E S -->
  <!-- ====================================================================== -->  
  <dependencies>
      
    <dependency>
			<groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
        <scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
      <scope>compile</scope>
		</dependency>
    
    <!-- JCR and jackrabbit-jcr2dav -->    
    <dependency>
      <groupId>org.motorbrot</groupId>
      <artifactId>openjfx-jcr-browser.cli</artifactId>
      <version>${parent.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>commons-cli</groupId>
          <artifactId>commons-cli</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    
    <!-- open-jfx -->
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-controls</artifactId>
      <version>${openjfx.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-fxml</artifactId>
      <version>${openjfx.version}</version>
      <scope>compile</scope>
    </dependency>

    <!-- for the application itself -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-csv</artifactId>
      <version>1.8</version>
      <scope>compile</scope>
    </dependency>
    
    <!-- Tests -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
        
    <dependency>
      <groupId>org.apache.sling</groupId>
      <artifactId>org.apache.sling.testing.jcr-mock</artifactId>
      <version>1.5.0</version>
      <scope>test</scope>
    </dependency>
        
    <dependency>
      <groupId>org.testfx</groupId>
      <artifactId>testfx-core</artifactId>
      <version>4.0.16-alpha</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testfx</groupId>
      <artifactId>testfx-junit5</artifactId>
      <version>4.0.16-alpha</version>
      <scope>test</scope>
    </dependency>
    <!-- If you wish to test in a headless environment your must add Monocle as a test dependency -->
    <dependency>
      <groupId>org.testfx</groupId>
      <artifactId>openjfx-monocle</artifactId>
      <!--version>jdk-11+26</version-->
      <version>jdk-12.0.1+2</version>
      <scope>test</scope>
    </dependency>
        
  </dependencies>

</project>
